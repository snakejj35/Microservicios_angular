package com.formacionbdi.microservicios.app.respuestas.services;

import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.formacionbdi.microservicios.app.respuestas.clients.IExamenFeignClient;
import com.formacionbdi.microservicios.app.respuestas.models.entity.Respuesta;
import com.formacionbdi.microservicios.app.respuestas.models.repository.IRespuestaRepository;
import com.formacionbdi.microservicios.common.examenes.models.entity.Examen;
import com.formacionbdi.microservicios.common.examenes.models.entity.Pregunta;

@Service
public class RespuestaServiceImpl implements IRespuestaService {

	@Autowired
	private IRespuestaRepository repository;
	
	@Autowired
	private IExamenFeignClient examenClient;
	
	@Override	
	@Transactional
	public Iterable<Respuesta> saveAll(Iterable<Respuesta> respuestas) {
		return repository.saveAll(respuestas);
	}

	@Override
	@Transactional(readOnly = true)
	public List<Respuesta> findRespuestaByAlumnoByExamen(Long alumnoId, Long examenId) { //Se modifica el metodo para obtener las respuestas por alumno y por examen de manera distribuida
		Examen examen = examenClient.obtenerExamenById(examenId);        		  	// 1. Se obtiene el examen mediante microservicio
		List<Pregunta> preguntas = examen.getPreguntas();							// 2. Se obnienen las preguntas a traves del examen
		List<Long> preguntaIds = preguntas.stream().map(p -> p.getId()).collect(Collectors.toList());
		List<Respuesta> respuestas = (List<Respuesta>) repository.findRespuestaByAlumnoByPreguntaIds(alumnoId, preguntaIds); 
		respuestas = respuestas.stream().map(r ->{
			preguntas.forEach(p ->{
				if(p.getId() == r.getPreguntaId()) {
					r.setPregunta(p);
				}
			});
			return r;
		}).collect(Collectors.toList());
		return respuestas;
	}

	@Override
	@Transactional(readOnly = true)
	public Iterable<Long> findExamenesIdsWithRespuestasByAlumno(Long alumnoId) {
		return null;
	}

}
